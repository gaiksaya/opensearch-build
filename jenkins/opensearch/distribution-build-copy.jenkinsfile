/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

lib = library(identifier: 'jenkins@unstable', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/gaiksaya/opensearch-build-libraries.git',
]))

pipeline {
    options {
        timeout(time: 4, unit: 'HOURS')
    }
    agent none
    environment {
        AGENT_LINUX_X64 = 'Jenkins-Agent-AL2023-X64-C54xlarge-Docker-Host'
        AGENT_LINUX_ARM64 = 'Jenkins-Agent-AL2023-Arm64-C6g4xlarge-Docker-Host'
        AGENT_WINDOWS_X64 = 'Jenkins-Agent-Windows2019-X64-C54xlarge-Docker-Host'
        IMAGE_LINUX_RPM = 'opensearchstaging/ci-runner:ci-runner-rockylinux8-opensearch-build-v4' // required for rpm to create digest sha256 correctly with rpm 4.12+, still define here for 1.x version as 2.x+ moved to rockylinux8 already
        IMAGE_LINUX_DEB = 'opensearchstaging/ci-runner:ci-runner-ubuntu2004-opensearch-build-v2' // required for deb to create pkg using debmake/debuild/debhelper
        IMAGE_WINDOWS_ZIP = 'opensearchstaging/ci-runner:ci-runner-windows2019-servercore-opensearch-build-v1' // required for windows to build zip distribution
    }
    parameters {
        string(
            name: 'INPUT_MANIFEST',
            description: 'Input manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0.yml.',
            trim: true
        )
    }
    stages {
        stage('verify-parameters') {
            agent {
                docker {
                    label AGENT_LINUX_X64
                    image 'docker/library/alpine:3'
                    registryUrl 'https://public.ecr.aws/'
                    alwaysPull true
                }
            }
            steps {
                script {
                    echo('Detect Docker Images and Related Parameters')
                    dockerAgent = detectDockerAgent()
                    env.javaVersionNumber = dockerAgent.javaVersion.replaceAll('[^0-9]', '') // Only get number
                    currentBuild.description = INPUT_MANIFEST
                }
            }
        }
        stage('build') {
            parallel {
                // stage('build-and-test-linux-x64-tar') {
                //     agent {
                //         docker {
                //             label AGENT_LINUX_X64
                //             image dockerAgent.image
                //             args dockerAgent.args
                //             registryUrl 'https://public.ecr.aws/'
                //             alwaysPull true
                //         }
                //     }
                //     steps {
                //         script {
                //             // echo "ERROR: Some error"
                //             // echo "Failed plugins are PA, Blah"
                //             // writeFile(file: 'project.rules', text:
                //             // '''
                //             // warning /Failed plugins/
                //             // ''')
                //             //     def logs = step([$class: 'LogParserPublisher',
                //             //         unstableOnWarning: true,
                //             //         failBuildOnError: true,
                //             //         projectRulePath: 'project.rules',
                //             //         useProjectRule: true])
                //             //     println(logs)
                //             def logs = sh( returnStdout: true, script: "./build.sh manifests/${INPUT_MANIFEST} --component OpenSearch performance-analyzer --platform linux -a x64 -d tar --continue-on-error")
                //             String[] parsed = logs.split('\n')
                //             // println('Here are parsed logs: '+ parsed)
                //             if (parsed.any{e -> e.contains('Failed plugins are')}){
                //                 unstable('Plugins failed')
                //             } else {
                //                 println('Alas!')
                //             }
                //         }
                //     }
                //     post {
                //         always {
                //             script {
                //                 postCleanup()
                //             }
                //         }
                //     }
                // }
                stage('build-and-test-linux-x64-tar') {
                    agent {
                        docker {
                            label AGENT_LINUX_X64
                            image dockerAgent.image
                            args dockerAgent.args
                            registryUrl 'https://public.ecr.aws/'
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            def buildManifestObj = buildAssembleUpload(
                                componentName: "performance-analyzer",
                                inputManifest: "manifests/${INPUT_MANIFEST}",
                                platform: 'linux',
                                architecture: 'x64',
                                distribution: 'tar',
                                continueOnError: true
                            )
                            String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                            String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                        }
                    }
                    post {
                        always {
                            script {
                                def stageLogs = logParserForStage('build-and-test-linux-x64-tar')
                                if (stageLogs.any{e -> e.contains('Failed plugins are')}){
                                    unstable('Plugins failed')
                                } else {
                                    println('Alas!')
                                }
                                postCleanup()
                            }
                        }
                    }
                }
            }
        }
    }
}
